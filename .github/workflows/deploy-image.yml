name: Production Deployment

env:
  DOTNET_VERSION: '6.0.x'
  VERCEL_USER_ID: ${{ secrets.VERCEL_USER_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  NODE_VERSION: '18.x'

on:
  push:
    branches:
      - main
      - master
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - '.env.example'
  workflow_dispatch:

# Add permissions for GITHUB_TOKEN
permissions:
  contents: read
  packages: write

jobs:
  Deploy-Production:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: './apps/api'
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@main

      - name: 'Debug Trigger Event'
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Branch name: ${{ github.ref }}"
          echo "Commit SHA: ${{ github.sha }}"
          echo "Repository: ${{ github.repository }}"
          echo "Workspace: ${{ github.workspace }}"
          ls -la

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Dependencies
        run: npm install

      - name: Build NestJS Application
        run: npm run build

      - name: 'Login to GitHub Container Registry'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}

      - name: 'Build and Push API Image'
        run: |
          docker build . --tag ghcr.io/${{github.repository_owner}}/firecrawl-plus:latest
          docker push ghcr.io/${{github.repository_owner}}/firecrawl-plus:latest

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_USER_ID }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}