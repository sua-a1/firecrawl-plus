"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../constants");
const error_1 = require("./error");
const date_1 = require("../utils/date");
/**
 * LogSnag Client
 */
class LogSnag {
    /**
     * Construct a new LogSnag instance
     * @param token LogSnag API token
     * @param project LogSnag project name
     * @param disableTracking Disable tracking
     * for more information, see: docs.logsnag.com
     */
    constructor({ token, project, disableTracking = false }) {
        this.disabled = false;
        this.token = token;
        this.project = project;
        this.disabled = disableTracking || false;
    }
    /**
     * Disable tracking for this instance
     * (this is useful for development)
     */
    disableTracking() {
        this.disabled = true;
    }
    /**
     * Enable tracking for this instance
     * (this is useful for development)
     */
    enableTracking() {
        this.disabled = false;
    }
    /**
     * Get project name
     * @returns project name
     */
    getProject() {
        return this.project;
    }
    /**
     * Creates authorization header
     * @returns Authorization header value
     */
    createAuthorizationHeader() {
        return `Bearer ${this.token}`;
    }
    /**
     * Creates headers for requests
     * @private
     */
    createHeaders() {
        return {
            'Content-Type': 'application/json',
            Authorization: this.createAuthorizationHeader()
        };
    }
    /**
     * Get insight methods
     */
    get insight() {
        return {
            track: this.insightTrack.bind(this),
            increment: this.insightIncrement.bind(this)
        };
    }
    /**
     * Publish a new event to LogSnag
     * @param options
     * @returns true when successfully published
     */
    track(options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.disabled)
                return true;
            const headers = this.createHeaders();
            const method = 'POST';
            // Convert timestamp to unix timestamp if needed
            options.timestamp = (0, date_1.toUnixTimestamp)(options.timestamp);
            const body = JSON.stringify(Object.assign(Object.assign({}, options), { project: this.getProject() }));
            const response = yield fetch(constants_1.ENDPOINTS.LOG, { method, body, headers });
            if (!response.ok) {
                throw new error_1.HTTPResponseError(response.status, response.statusText, yield response.json());
            }
            return true;
        });
    }
    /**
     * Identify a user
     * @param options
     * @returns true when successfully published
     */
    identify(options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.disabled)
                return true;
            const headers = this.createHeaders();
            const method = 'POST';
            const body = JSON.stringify(Object.assign(Object.assign({}, options), { project: this.getProject() }));
            const response = yield fetch(constants_1.ENDPOINTS.IDENTIFY, { method, body, headers });
            if (!response.ok) {
                throw new error_1.HTTPResponseError(response.status, response.statusText, yield response.json());
            }
            return true;
        });
    }
    /**
     * Group a user or update group properties
     * @param options
     * @returns true when successfully published
     */
    group(options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.disabled)
                return true;
            const headers = this.createHeaders();
            const method = 'POST';
            const body = JSON.stringify(Object.assign(Object.assign({}, options), { project: this.getProject() }));
            const response = yield fetch(constants_1.ENDPOINTS.GROUP, { method, body, headers });
            if (!response.ok) {
                throw new error_1.HTTPResponseError(response.status, response.statusText, yield response.json());
            }
            return true;
        });
    }
    /**
     * Publish a new insight to LogSnag
     * @param options
     * @returns true when successfully published
     */
    insightTrack(options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.disabled)
                return true;
            const headers = this.createHeaders();
            const method = 'POST';
            const body = JSON.stringify(Object.assign(Object.assign({}, options), { project: this.getProject() }));
            const response = yield fetch(constants_1.ENDPOINTS.INSIGHT, { method, body, headers });
            if (!response.ok) {
                throw new error_1.HTTPResponseError(response.status, response.statusText, yield response.json());
            }
            return true;
        });
    }
    /**
     * Increment an insight value
     * @param options
     * @returns true when successfully published
     */
    insightIncrement(options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.disabled)
                return true;
            const headers = this.createHeaders();
            const method = 'PATCH';
            const body = JSON.stringify({
                project: this.getProject(),
                icon: options.icon,
                title: options.title,
                value: {
                    $inc: options.value
                }
            });
            const response = yield fetch(constants_1.ENDPOINTS.INSIGHT, { method, body, headers });
            if (!response.ok) {
                throw new error_1.HTTPResponseError(response.status, response.statusText, yield response.json());
            }
            return true;
        });
    }
}
exports.default = LogSnag;
//# sourceMappingURL=logsnag.js.map