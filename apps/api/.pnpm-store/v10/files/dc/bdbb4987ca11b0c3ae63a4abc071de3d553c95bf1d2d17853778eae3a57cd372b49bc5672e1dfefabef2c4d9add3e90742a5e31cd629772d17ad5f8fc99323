"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PartitionParameters$ = exports.Strategy$ = exports.OutputFormat$ = exports.Files$ = exports.ChunkingStrategy$ = exports.Strategy = exports.OutputFormat = exports.ChunkingStrategy = void 0;
const b64$ = __importStar(require("../../../lib/base64"));
const primitives_1 = require("../../../lib/primitives");
const types_1 = require("../../types");
const z = __importStar(require("zod"));
var ChunkingStrategy;
(function (ChunkingStrategy) {
    ChunkingStrategy["Basic"] = "basic";
    ChunkingStrategy["ByPage"] = "by_page";
    ChunkingStrategy["BySimilarity"] = "by_similarity";
    ChunkingStrategy["ByTitle"] = "by_title";
})(ChunkingStrategy || (exports.ChunkingStrategy = ChunkingStrategy = {}));
/**
 * The format of the response. Supported formats are application/json and text/csv. Default: application/json.
 */
var OutputFormat;
(function (OutputFormat) {
    OutputFormat["ApplicationJson"] = "application/json";
    OutputFormat["TextCsv"] = "text/csv";
})(OutputFormat || (exports.OutputFormat = OutputFormat = {}));
/**
 * The strategy to use for partitioning PDF/image. Options are fast, hi_res, auto. Default: auto
 */
var Strategy;
(function (Strategy) {
    Strategy["Fast"] = "fast";
    Strategy["HiRes"] = "hi_res";
    Strategy["Auto"] = "auto";
    Strategy["OcrOnly"] = "ocr_only";
})(Strategy || (exports.Strategy = Strategy = {}));
/** @internal */
var ChunkingStrategy$;
(function (ChunkingStrategy$) {
    ChunkingStrategy$.inboundSchema = z.union([
        z.nativeEnum(ChunkingStrategy),
        z.string().transform(types_1.catchUnrecognizedEnum),
    ]);
    ChunkingStrategy$.outboundSchema = z.union([
        z.nativeEnum(ChunkingStrategy),
        z.string().and(z.custom()),
    ]);
})(ChunkingStrategy$ || (exports.ChunkingStrategy$ = ChunkingStrategy$ = {}));
/** @internal */
var Files$;
(function (Files$) {
    Files$.inboundSchema = z.object({
        content: b64$.zodInbound,
        fileName: z.string(),
    });
    Files$.outboundSchema = z.object({
        content: b64$.zodOutbound,
        fileName: z.string(),
    });
})(Files$ || (exports.Files$ = Files$ = {}));
/** @internal */
var OutputFormat$;
(function (OutputFormat$) {
    OutputFormat$.inboundSchema = z.union([
        z.nativeEnum(OutputFormat),
        z.string().transform(types_1.catchUnrecognizedEnum),
    ]);
    OutputFormat$.outboundSchema = z.union([
        z.nativeEnum(OutputFormat),
        z.string().and(z.custom()),
    ]);
})(OutputFormat$ || (exports.OutputFormat$ = OutputFormat$ = {}));
/** @internal */
var Strategy$;
(function (Strategy$) {
    Strategy$.inboundSchema = z.union([
        z.nativeEnum(Strategy),
        z.string().transform(types_1.catchUnrecognizedEnum),
    ]);
    Strategy$.outboundSchema = z.union([
        z.nativeEnum(Strategy),
        z.string().and(z.custom()),
    ]);
})(Strategy$ || (exports.Strategy$ = Strategy$ = {}));
/** @internal */
var PartitionParameters$;
(function (PartitionParameters$) {
    PartitionParameters$.inboundSchema = z
        .object({
        files: z.lazy(() => Files$.inboundSchema),
        chunking_strategy: z.nullable(ChunkingStrategy$.inboundSchema).optional(),
        combine_under_n_chars: z.nullable(z.number().int()).optional(),
        coordinates: z.boolean().default(false),
        encoding: z.nullable(z.string()).optional(),
        extract_image_block_types: z.array(z.string()).optional(),
        gz_uncompressed_content_type: z.nullable(z.string()).optional(),
        hi_res_model_name: z.nullable(z.string()).optional(),
        include_orig_elements: z.nullable(z.boolean()).optional(),
        include_page_breaks: z.boolean().default(false),
        languages: z.array(z.string()).optional(),
        max_characters: z.nullable(z.number().int()).optional(),
        multipage_sections: z.boolean().default(true),
        new_after_n_chars: z.nullable(z.number().int()).optional(),
        ocr_languages: z.array(z.string()).optional(),
        output_format: OutputFormat$.inboundSchema.default(OutputFormat.ApplicationJson),
        overlap: z.number().int().default(0),
        overlap_all: z.boolean().default(false),
        pdf_infer_table_structure: z.boolean().default(true),
        similarity_threshold: z.nullable(z.number()).optional(),
        skip_infer_table_types: z.array(z.string()).optional(),
        split_pdf_concurrency_level: z.number().int().default(5),
        split_pdf_page: z.boolean().default(true),
        starting_page_number: z.nullable(z.number().int()).optional(),
        strategy: Strategy$.inboundSchema.default(Strategy.Auto),
        unique_element_ids: z.boolean().default(false),
        xml_keep_tags: z.boolean().default(false),
    })
        .transform((v) => {
        return (0, primitives_1.remap)(v, {
            chunking_strategy: "chunkingStrategy",
            combine_under_n_chars: "combineUnderNChars",
            extract_image_block_types: "extractImageBlockTypes",
            gz_uncompressed_content_type: "gzUncompressedContentType",
            hi_res_model_name: "hiResModelName",
            include_orig_elements: "includeOrigElements",
            include_page_breaks: "includePageBreaks",
            max_characters: "maxCharacters",
            multipage_sections: "multipageSections",
            new_after_n_chars: "newAfterNChars",
            ocr_languages: "ocrLanguages",
            output_format: "outputFormat",
            overlap_all: "overlapAll",
            pdf_infer_table_structure: "pdfInferTableStructure",
            similarity_threshold: "similarityThreshold",
            skip_infer_table_types: "skipInferTableTypes",
            split_pdf_concurrency_level: "splitPdfConcurrencyLevel",
            split_pdf_page: "splitPdfPage",
            starting_page_number: "startingPageNumber",
            unique_element_ids: "uniqueElementIds",
            xml_keep_tags: "xmlKeepTags",
        });
    });
    PartitionParameters$.outboundSchema = z
        .object({
        files: z.lazy(() => Files$.outboundSchema).or(types_1.blobLikeSchema),
        chunkingStrategy: z.nullable(ChunkingStrategy$.outboundSchema).optional(),
        combineUnderNChars: z.nullable(z.number().int()).optional(),
        coordinates: z.boolean().default(false),
        encoding: z.nullable(z.string()).optional(),
        extractImageBlockTypes: z.array(z.string()).optional(),
        gzUncompressedContentType: z.nullable(z.string()).optional(),
        hiResModelName: z.nullable(z.string()).optional(),
        includeOrigElements: z.nullable(z.boolean()).optional(),
        includePageBreaks: z.boolean().default(false),
        languages: z.array(z.string()).optional(),
        maxCharacters: z.nullable(z.number().int()).optional(),
        multipageSections: z.boolean().default(true),
        newAfterNChars: z.nullable(z.number().int()).optional(),
        ocrLanguages: z.array(z.string()).optional(),
        outputFormat: OutputFormat$.outboundSchema.default(OutputFormat.ApplicationJson),
        overlap: z.number().int().default(0),
        overlapAll: z.boolean().default(false),
        pdfInferTableStructure: z.boolean().default(true),
        similarityThreshold: z.nullable(z.number()).optional(),
        skipInferTableTypes: z.array(z.string()).optional(),
        splitPdfConcurrencyLevel: z.number().int().default(5),
        splitPdfPage: z.boolean().default(true),
        startingPageNumber: z.nullable(z.number().int()).optional(),
        strategy: Strategy$.outboundSchema.default(Strategy.Auto),
        uniqueElementIds: z.boolean().default(false),
        xmlKeepTags: z.boolean().default(false),
    })
        .transform((v) => {
        return (0, primitives_1.remap)(v, {
            chunkingStrategy: "chunking_strategy",
            combineUnderNChars: "combine_under_n_chars",
            extractImageBlockTypes: "extract_image_block_types",
            gzUncompressedContentType: "gz_uncompressed_content_type",
            hiResModelName: "hi_res_model_name",
            includeOrigElements: "include_orig_elements",
            includePageBreaks: "include_page_breaks",
            maxCharacters: "max_characters",
            multipageSections: "multipage_sections",
            newAfterNChars: "new_after_n_chars",
            ocrLanguages: "ocr_languages",
            outputFormat: "output_format",
            overlapAll: "overlap_all",
            pdfInferTableStructure: "pdf_infer_table_structure",
            similarityThreshold: "similarity_threshold",
            skipInferTableTypes: "skip_infer_table_types",
            splitPdfConcurrencyLevel: "split_pdf_concurrency_level",
            splitPdfPage: "split_pdf_page",
            startingPageNumber: "starting_page_number",
            uniqueElementIds: "unique_element_ids",
            xmlKeepTags: "xml_keep_tags",
        });
    });
})(PartitionParameters$ || (exports.PartitionParameters$ = PartitionParameters$ = {}));
//# sourceMappingURL=partitionparameters.js.map