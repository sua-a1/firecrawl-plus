"use strict";
/*!
 * jsPOS
 *
 * Copyright 2010, Percy Wegmann
 * Licensed under the GNU LGPLv3 license
 * http://www.opensource.org/licenses/lgpl-3.0.html
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Lexer = void 0;
var re = {
    ids: /(?:^|\s)[a-z0-9-]{8,45}(?:$|\s)/gi,
    number: /[0-9]*\.[0-9]+|[0-9]+/gi,
    space: /\s+/gi,
    unblank: /\S/,
    email: /[-!#$%&'*+/0-9=?A-Z^_a-z{|}~](?:\.?[-!#$%&'*+/0-9=?A-Z^_a-z`{|}~])*@[a-zA-Z0-9](?:-?\.?[a-zA-Z0-9])*(?:\.[a-zA-Z](?:-?[a-zA-Z0-9])*)+/gi,
    urls: /(?:https?:\/\/)(?:[\da-z.-]+)\.(?:[a-z.]{2,6})(?:[/\w.\-?#=]*)*\/?/gi,
    punctuation: /[/.,?!"':;$()#â€™`]/gi,
    time: /(?:[0-9]|0[0-9]|1[0-9]|2[0-3]):(?:[0-5][0-9])\s?(?:[aApP][mM])/gi,
};
var LexerNode = (function () {
    function LexerNode(string, regex, regexs) {
        string = string.trim();
        this.children = [];
        this.matches = null;
        var childElements = [];
        if (string) {
            this.matches = string.match(regex);
            childElements = string.split(regex);
        }
        if (!this.matches) {
            this.matches = [];
            childElements = [string];
        }
        if (!regexs.length) {
            this.children = childElements;
        }
        else {
            var nextRegex = regexs[0], nextRegexes = regexs.slice(1);
            for (var _i = 0, childElements_1 = childElements; _i < childElements_1.length; _i++) {
                var element = childElements_1[_i];
                this.children.push(new LexerNode(element, nextRegex, nextRegexes));
            }
        }
    }
    LexerNode.prototype.fillArray = function (array) {
        for (var i = 0; i < this.children.length; i++) {
            var child = this.children[i];
            if (typeof child !== 'string' && typeof child.fillArray === 'function') {
                child.fillArray(array);
            }
            else if (re.unblank.test(child.toString())) {
                array.push(child.toString().trim());
            }
            if (this.matches) {
                if (i < this.matches.length) {
                    var match = this.matches[i];
                    if (re.unblank.test(match)) {
                        array.push(match.trim());
                    }
                }
            }
        }
        return array;
    };
    LexerNode.prototype.toArray = function () {
        return this.fillArray([]);
    };
    LexerNode.prototype.toString = function () {
        return this.toArray().toString();
    };
    return LexerNode;
}());
var Lexer = (function () {
    function Lexer() {
        this.regexs = [re.urls, re.ids, re.time, re.number, re.space, re.email, re.punctuation];
    }
    Lexer.prototype.lex = function (string) {
        return new LexerNode(string, this.regexs[0], this.regexs.slice(1)).toArray();
    };
    return Lexer;
}());
exports.Lexer = Lexer;
